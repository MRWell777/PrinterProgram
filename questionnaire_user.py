from tkinter import *
import sqlite3
from tkinter import messagebox
from tkinter import ttk
from PIL import Image, ImageTk

def open_quest_user(parent,username):
    quest_user = Toplevel(parent)
    quest_user.title("–ê–Ω–∫–µ—Ç–∞")
    quest_user.overrideredirect(True)

    # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
    win_width = 700
    win_height = 600

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
    screen_width = quest_user.winfo_screenwidth()
    screen_height = quest_user.winfo_screenheight()

    

    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    x = (screen_width // 2) - (win_width // 2) + 150
    y = (screen_height // 2) - (win_height // 2)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –ø–æ —Ü–µ–Ω—Ç—Ä—É
    quest_user.geometry(f"{win_width}x{win_height}+{x}+{y}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∏–∑–º–µ–Ω—è–µ–º —Ñ–æ–Ω –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
    bg_image = Image.open("res/quest_bg.png")
    bg_image = bg_image.resize((win_width, win_height))  # –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
    bg_photo = ImageTk.PhotoImage(bg_image)

    line_image = Image.open("res/Line_acua_blue.png")
    line_image = line_image.resize((250,35))
    Line_photo = ImageTk.PhotoImage(line_image)

    menu_line_image = Image.open("res/Line_acua_blue.png")
    menu_line_image = menu_line_image.resize((300,35))
    menu_line_photo = ImageTk.PhotoImage(menu_line_image)

    add_image = Image.open("res/add_image.png")
    add_image=add_image.resize((20,20))
    add_photo = ImageTk.PhotoImage(add_image)

    trash_image = Image.open("res/trash_image.png")
    trash_image=trash_image.resize((20,20))
    trash_photo = ImageTk.PhotoImage(trash_image)

    quest_user.bg_photo = bg_photo  # —á—Ç–æ–±—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–∏–ª–æ—Å—å —Å–±–æ—Ä—â–∏–∫–æ–º –º—É—Å–æ—Ä–∞
    quest_user.Line_photo = Line_photo
    quest_user.add_photo = add_photo
    quest_user.trash_photo = trash_photo
    quest_user.menu_line_photo = menu_line_photo

    bg_label = Label(quest_user, image=bg_photo)
    bg_label.place(relwidth=1, relheight=1)

    menu_underline = Label(quest_user, image=menu_line_photo, bg="#000421")
    

    fields = {
        "–§–∞–º–∏–ª–∏—è:": None,
        "–ò–º—è:": None,
        "–û—Ç—á–µ—Å—Ç–≤–æ:": None,
        "–ì–æ—Ä–æ–¥:": None,
        "–£–ª–∏—Ü–∞:": None,
        "–î–æ–º:": None,
        "–ü–æ–¥—ä–µ–∑–¥:": None,
        "–ö–æ–ª-–≤–æ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤:": None,
        "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:": None,
        "–ü–æ—á—Ç–∞:": None
        
    }

    y_offset = 50
    for label_text in fields:
        label = Label(quest_user, text=label_text,fg="white", bg="#000421", font=("v_CCMeanwhile", 10, "bold"))
        label.place(x=30, y=y_offset+9)

        underline = Label(quest_user, image=Line_photo, bg="#000421")
        underline.place(x=245, y=y_offset)

        entry = Entry(quest_user,bg="#115d81",relief="flat", width=20,fg="white",font=("v_CCMeanwhile", 10, "bold"))
        entry.place(x=259, y=y_offset +9)
        fields[label_text] = entry
        y_offset += 40

        

    
    # ---------- –ù–∞–¥–ø–∏—Å—å "–£—Å–ª—É–≥–∏" ----------
    Label(quest_user, text="–£—Å–ª—É–≥–∏:", bg="#000421", fg="white", font=("v_CCMeanwhile", 10, "bold")).place(x=30, y=y_offset + 9)

    # ---------- –£—Å–ª—É–≥–∏ (OptionMenus —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º) ----------
    service_options = ["–†–µ–º–æ–Ω—Ç", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"]
    option_widgets = []

    def get_used_services():
        return [var.get() for _, var, _ in option_widgets if var.get() != "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É"]

    def update_menus():
        used = get_used_services()
        for frame, var, _ in option_widgets:
            menu = frame.option_menu["menu"]
            menu.delete(0, "end")
            for option in service_options:
                if option not in used or var.get() == option:
                    menu.add_command(label=option, command=lambda v=var, o=option: v.set(o))

    def reposition_widgets():
        for index, (frame, var, menu_underline) in enumerate(option_widgets):
            for widget in frame.winfo_children():
                widget.destroy()
            
            option_menu = OptionMenu(frame, var, *service_options)
            option_menu.config(bg="#115d81", fg="white", font=("v_CCMeanwhile", 10, "bold"),
                               activebackground="#444", activeforeground="white",
                               width=17, borderwidth=0, highlightthickness=0)
            option_menu["menu"].config(bg="#115d81", fg="white", font=("v_CCMeanwhile", 10, "bold"))
            option_menu.pack(side=LEFT)
            frame.option_menu = option_menu

            if index == 0:
                Button(frame, image=quest_user.add_photo,bg="#115d81", activebackground="#115d81", 
                       bd=0, command=add_option_menu).pack(side=LEFT,padx=10)
            else:
                Button(frame, image=quest_user.trash_photo,bg="#115d81", activebackground="#115d81", 
                       bd=0, command=lambda f=frame: remove_option_menu(f)).pack(side=LEFT, padx=10)

            y_pos = y_offset + 7 + index * 40

            # ====== –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ ======
            menu_underline.place(x=245, y=y_pos )
            menu_underline.lift()  # üëà –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–∞–¥ —Ñ–æ–Ω–æ–º
            frame.lift()      # üëà –∏ –Ω–∞–¥ –ª–∏–Ω–∏–µ–π, –Ω–æ –Ω–∏–∂–µ option_menu

            
            frame.place(x=260, y=y_pos+7)
            

        update_menus()

    def add_option_menu():
        if len(option_widgets) >= 3:
            messagebox.showinfo("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ", "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 —É—Å–ª—É–≥")
            return
        var = StringVar(value="–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É")
        frame = Frame(quest_user, bg="#115d81")
        menu_underline = Label(quest_user, image=menu_line_photo, bg="#000421")
        option_widgets.append((frame, var, menu_underline))
        reposition_widgets()

    def remove_option_menu(frame_to_remove):
        if len(option_widgets) <= 1:
            messagebox.showinfo("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ", "–•–æ—Ç—è –±—ã –æ–¥–Ω–∞ —É—Å–ª—É–≥–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è")
            return
        for i, (frame, var, menu_underline) in enumerate(option_widgets):
            if frame == frame_to_remove:
                option_widgets.pop(i)
                frame.destroy()
                menu_underline.destroy()
                break
        reposition_widgets()

    # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ä–∞–∑—É
    add_option_menu()

    from datetime import datetime

    def save_order():
        # 1. –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = {label: entry.get() for label, entry in fields.items()}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ (–¥–æ–±–∞–≤—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        if not data["–§–∞–º–∏–ª–∏—è:"] or not data["–ò–º—è:"] or not data["–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"]:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
            return

        # 2. –£—Å–ª—É–≥–∏
        ## TODO: –∑–∞–º–µ–Ω–∏—Ç—å –∫–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥ –Ω–∞ –≤—ã–∑–æ–≤ —Å –ë–î
        selected_services = [var.get() for _, var, _ in option_widgets if var.get() != "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É"]
        if not selected_services:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —É—Å–ª—É–≥—É.")
            return
        services_str = ", ".join(selected_services)

        # 3. –î–∞—Ç–∞
        today = datetime.now().strftime("%Y-%m-%d")

        # 4. –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç–∞—Ç—É—Å–∞ "–û–∂–∏–¥–∞–µ—Ç"
        try:
            status_conn = sqlite3.connect("statuses.db")
            status_cursor = status_conn.cursor()
            status_cursor.execute("SELECT id FROM statuses WHERE name = ?", ("–û–∂–∏–¥–∞–µ—Ç",))
            status_id = status_cursor.fetchone()[0]
            status_conn.close()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return

            # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ orders.db
        try:
            order_conn = sqlite3.connect("order.db")
            order_cursor = order_conn.cursor()
            order_cursor.execute("""
            INSERT INTO orders (
                last_name, first_name, middle_name, city, street, house,
                entrance, printer_count, phone, email, services, date_created, status_id, username
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
            data["–§–∞–º–∏–ª–∏—è:"], data["–ò–º—è:"], data["–û—Ç—á–µ—Å—Ç–≤–æ:"],
            data["–ì–æ—Ä–æ–¥:"], data["–£–ª–∏—Ü–∞:"], data["–î–æ–º:"],
            int(data["–ü–æ–¥—ä–µ–∑–¥:"]) if data["–ü–æ–¥—ä–µ–∑–¥:"].isdigit() else None,
            int(data["–ö–æ–ª-–≤–æ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤:"]) if data["–ö–æ–ª-–≤–æ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤:"].isdigit() else None,
            data["–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"], data["–ü–æ—á—Ç–∞:"],
            services_str, today, status_id,username
            ))
            order_conn.commit()

            # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞
            order_id = order_cursor.lastrowid
            order_conn.close()

            messagebox.showinfo("–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω", f"–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\nID –∑–∞–∫–∞–∑–∞: {order_id}")
            quest_user.destroy()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        
        

    Button(quest_user, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", bg="#115d81", fg="white", font=("v_CCMeanwhile", 10, "bold"),
       command=save_order).place(x=50, y=520)
    
   